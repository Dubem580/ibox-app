(* SECTION: Days of the week *)

Inductive day : Type :=
  | monday : day
  | tuesday : day
  | wednesday : day
  | thursday : day
  | friday : day
  | saturday : day
  | sunday : day.

Definition next_weekday (d : day) : day :=
  match d with
  | monday => tuesday
  | tuesday => wednesday
  | wednesday => thursday
  | thursday => friday
  | friday => monday
  | saturday => monday
  | sunday => monday
  end.

Example test_next_weekday: (next_weekday (next_weekday saturday)) = tuesday.
Proof. reflexivity. Qed.

(* SECTION: Booleans *)

Inductive bool : Type :=
  | true : bool
  | false : bool.

Definition negb (b : bool) : bool :=
  match b with
  | true => false
  | false => true
  end.

Definition andb (b1 b2 : bool) : bool :=
  match b1 with
  | true => b2
  | false => false
  end.

Definition orb (b1 b2 : bool) : bool :=
  match b1 with
  | true => true
  | false => b2
  end.

(* EXERCISE: nandb *)
Definition nandb (b1 b2 : bool) : bool :=
  match b1 with
  | true => negb b2
  | false => true
  end.

Example test_nandb1: (nandb true false) = true.
Proof. reflexivity. Qed.

Example test_nandb2: (nandb false false) = true.
Proof. reflexivity. Qed.

Example test_nandb3: (nandb false true) = true.
Proof. reflexivity. Qed.

Example test_nandb4: (nandb true true) = false.
Proof. reflexivity. Qed.

(* EXERCISE: andb3 *)
Definition andb3 (b1 b2 b3 : bool) : bool :=
  match b1 with
  | true => andb b2 b3
  | false => false
  end.

Example test_andb31: (andb3 true true true) = true.
Proof. reflexivity. Qed.

Example test_andb32: (andb3 false true true) = false.
Proof. reflexivity. Qed.

Example test_andb33: (andb3 true false true) = false.
Proof. reflexivity. Qed.

Example test_andb34: (andb3 true true false) = false.
Proof. reflexivity. Qed.

(* SECTION: numbers *)

Module Playground1.

Inductive nat : Type :=
  | O : nat
  | S : nat -> nat.

Definition pred (n: nat) : nat :=
  match n with
  | O => O
  | S n' => n'
  end.

End Playground1.

Definition minustwo (n : nat) : nat :=
  match n with
  | O => O
  | S O => O
  | S (S n') => n'
  end.

Fixpoint evenb (n : nat) : bool :=
  match n with
  | O => true
  | S O => false
  | S (S n') => evenb n'
  end.

Definition oddb (n:nat) : bool := negb (evenb n).

Example test_oddb1: (oddb (S O)) = true.
Proof. reflexivity. Qed.

Example test_oddb2: (oddb (S (S (S (S O))))) = false.
Proof. reflexivity. Qed.

Module Playground2.

Fixpoint plus (n m : nat) : nat :=
  match n with
  | O => m
  | S n' => S (plus n' m)
  end.

Fixpoint mult (n m : nat) : nat :=
  match n with
  | O => O
  | S n' => plus m (mult n' m)
  end.

Definition minus (n m : nat) : nat :=
  match n, m with
  | O, _ => O
  | S _, 0 => n
  | S n', S m' => minus n' m'
  end.

End Playground2.

(* EXERCISE: factorial *)
Fixpoint factorial (n : nat) : nat :=
  match n with
  | O => S O
  | S n' => mult n (factorial n')
  end.

Example test_factorial1: (factorial 3) = 6.
Proof. reflexivity. Qed.

Example test_factorial2: (factorial 5) = (mult 10 12).
Proof. reflexivity. Qed.

Fixpoint beq_nat (n m : nat) : bool :=
  match n with
  | O => match m with
         | O => true
         | S _ => false
         end
  | S n' => match m with
            | O => false
            | S m' => beq_nat n' m'
            end
  end.

Fixpoint ble_nat (n m : nat) : bool :=
  match n with
  | O => true
  | S n' => match m with
            | O => false
            | S m' => ble_nat n' m'
            end
  end.

Example test_ble_nat1: (ble_nat 2 2) = true.
Proof. reflexivity. Qed.

Example test_ble_nat2: (ble_nat 2 4) = true.
Proof. reflexivity. Qed.

Example test_ble_nat3: (ble_nat 4 2) = false.
Proof. reflexivity. Qed.

(* EXERCISE: blt_nat *)
Definition blt_nat (n m : nat) : bool :=
  ble_nat (n+1) m.

Example test_blt_nat1: (blt_nat 2 2) = false.
Proof. reflexivity. Qed.

Example test_blt_nat2: (blt_nat 2 4) = true.
Proof. reflexivity. Qed.

Example test_blt_nat3: (blt_nat 4 2) = false.
Proof. reflexivity. Qed.

(* SECTION: Proof by Simplification *)

Theorem plus_O_n: forall n : nat, 0 + n = n.
Proof. reflexivity. Qed.

(* SECTION: The intros Tactic *)

Theorem plus_O_n'': forall n : nat, 0 + n = n.
Proof. intros n. reflexivity. Qed.

Theorem plus_1_l: forall n : nat, 1 + n = S n.
Proof. intros n. reflexivity. Qed.

Theorem mult_O_l: forall n : nat, 0 * n = 0.
Proof. intros n. reflexivity. Qed.

(* SECTION: Proof by Rewriting *)

Theorem plus_id_example: forall n m : nat, n = m -> n + n = m + m.
Proof. intros n m. intros H. rewrite H. reflexivity. Qed.

(* EXERCISE: plus_id_exercise *)
Theorem plus_id_exercise : forall n m o : nat, n = m -> m = o -> n + m = m + o.
Proof. intros n m o.
  intros H1. intros H2.
  rewrite <- H2. rewrite <- H1. reflexivity.
Qed.

Theorem mult_0_plus : forall n m : nat, (0 + n) * m = n * m.
Proof. intros n m. rewrite plus_O_n. reflexivity. Qed.

(* EXERCISE: mult_1_plus *)
Theorem mult_1_plus : forall n m : nat, (1 + n) * m = m + (n * m).
Proof. intros n m. rewrite plus_1_l. simpl. reflexivity. Qed.

Theorem plus_1_neq_0 : forall n : nat, beq_nat (n + 1) 0 = false.
Proof. intros n. destruct n.
  reflexivity.
  reflexivity.
Qed.

Theorem negb_involutive : forall b : bool, negb (negb b) = b.
Proof. intros b. destruct b.
  reflexivity.
  reflexivity.
Qed.

(* EXERCISE: zero_nbeq_plus_1 *)
Theorem zero_nbeq_plus_1 : forall n : nat, beq_nat 0 (n + 1) = false.
Proof. intros n. destruct n.
  reflexivity.
  reflexivity.
Qed.

(* SECTION: Naming Cases *)

(* BEGIN COPY/PASTE *)
Require String. Open Scope string_scope.

Ltac move_to_top x :=
  match reverse goal with
  | H : _ |- _ => try move x after H
  end.

Tactic Notation "assert_eq" ident(x) constr(v) :=
  let H := fresh in
  assert (x = v) as H by reflexivity;
  clear H.

Tactic Notation "Case_aux" ident(x) constr(name) :=
  first [
    set (x := name); move_to_top x
  | assert_eq x name; move_to_top x
  | fail 1 "because we are working on a different case" ].

Tactic Notation "Case" constr(name) := Case_aux Case name.
Tactic Notation "SCase" constr(name) := Case_aux SCase name.
Tactic Notation "SSCase" constr(name) := Case_aux SSCase name.
Tactic Notation "SSSCase" constr(name) := Case_aux SSSCase name.
Tactic Notation "SSSSCase" constr(name) := Case_aux SSSSCase name.
Tactic Notation "SSSSSCase" constr(name) := Case_aux SSSSSCase name.
Tactic Notation "SSSSSSCase" constr(name) := Case_aux SSSSSSCase name.
Tactic Notation "SSSSSSSCase" constr(name) := Case_aux SSSSSSSCase name.

(* END COPY-PASTE *)

(* EXERCISE: andb_true_elim2 *)
Theorem andb_true_elim1 : forall b c : bool, andb b c = true -> b = true.
Proof. intros b c H. destruct b.
  Case "b = true". reflexivity.
  Case "b = false". rewrite <- H. reflexivity.
Qed.

Theorem plus_0_r : forall n : nat, n + 0 = n.
Proof. intros n. induction n.
  Case "n = 0". reflexivity.
  Case "n = S n". simpl. rewrite IHn. reflexivity.
Qed.

Theorem minus_diag : forall n : nat, minus n n = 0.
Proof. intros n. induction n.
  Case "n = 0". reflexivity.
  Case "n = S n". simpl. rewrite IHn. reflexivity.
Qed.

(* EXERCISE: basic_induction *)
Theorem mult_0_r : forall n : nat, n * 0 = 0.
Proof. intros n. induction n.
  Case "n = 0". reflexivity.
  Case "n -> S n". simpl. rewrite IHn. reflexivity.
Qed.

Theorem plus_n_Sm : forall n m : nat,
  S (n + m) = n + (S m).
Proof. intros n m. induction n.
  Case "n = 0". reflexivity.
  Case "n -> S n". simpl. rewrite IHn. reflexivity. Qed.

Theorem plus_comm : forall n m : nat, n + m = m + n.
Proof. intros n m. induction m.
  Case "m = 0". simpl. rewrite plus_0_r. reflexivity.
  Case "m -> S m". rewrite <- plus_n_Sm. simpl. rewrite IHm. reflexivity. Qed.

Fixpoint double (n:nat) :=
  match n with
  | O => O
  | S n' => S (S (double n'))
  end.

(* EXERCISE: double_plus *)
Lemma double_plus : forall n, double n = n + n.
Proof. intros n. induction n.
  Case "n = 0". reflexivity.
  Case "n -> Sn". simpl. rewrite IHn. rewrite plus_n_Sm. reflexivity.
Qed.

(* SECTION: Formal vs. Informal Proof *)

Theorem plus_assoc' : forall n m p : nat, n + (m + p) = (n + m) + p.
Proof. intros n m p. induction n.
  Case "n = 0". reflexivity.
  Case "n -> S n". simpl. rewrite IHn. reflexivity.
Qed.

(* EXERCISE: beq_nat_refl *)
Theorem beq_nat_refl : forall n : nat,
  true = beq_nat n n.
Proof. intros n. induction n.
  Case "n = 0". reflexivity.
  Case "n -> S n". simpl. rewrite <- IHn. reflexivity.
Qed.

(* SECTION: Proofs within proofs *)

Theorem mult_0_plus' : forall n m : nat, (0 + n) * m = n * m.
Proof. intros n m.
  assert (H: 0 + n = n).
    Case "Proof of assertion". reflexivity.
  rewrite H. reflexivity.
Qed.

Theorem plus_rearrange : forall n m p q : nat,
 (n + m) + (p + q) = (m + n) + (p + q).
Proof. intros n m p q.
  assert (H: n + m = m + n).
    Case "Proof of assertion". rewrite plus_comm. reflexivity.
  rewrite H. reflexivity.
Qed.

(* EXERCISE: mult_comm *)
Theorem plus_swap : forall n m p : nat, n + (m + p) = m + (n + p).
Proof. intros n m p.
  rewrite plus_assoc'. rewrite plus_assoc'.
  assert (H: n + m = m + n). rewrite plus_comm. reflexivity.
  rewrite H. reflexivity.
Qed.

Theorem mult_n_Sm : forall n m : nat, n * S m = n + n * m.
Proof. intros n m. induction n.
  Case "n = 0". reflexivity.
  Case "n -> S n". simpl. rewrite plus_swap. rewrite IHn. reflexivity.
Qed.

Theorem mult_comm : forall n m : nat, n * m = m * n.
Proof. intros n m. induction m.
  Case "m = 0". simpl. rewrite mult_0_r. reflexivity.
  Case "m -> S m". simpl. rewrite mult_n_Sm. rewrite IHm. reflexivity.
Qed.

(* EXERCISE: evenb_n__oddb_Sn *)
Theorem evenb_n__oddb_Sn : forall n : nat, evenb n = negb (evenb (S n)).
Proof. intros n. induction n.
  Case "n = 0". reflexivity.
  Case "n -> S n". assert (H : evenb (S (S n)) = evenb n). reflexivity.
                   rewrite H. rewrite IHn. rewrite negb_involutive.
                   reflexivity.
Qed.

(* SECTION: More Exercises *)

(* EXERCISE: plus_swap' *)
Theorem plus_swap' : forall n m p : nat, n + (m + p) = m + (n + p).
Proof. intros n m p.
  rewrite plus_assoc', plus_assoc'.
  replace (n+m) with (m+n). reflexivity.
  rewrite plus_comm. reflexivity.
Qed.

(* Felipe's exercise *)
Theorem mult_dist : forall n m p: nat, n * (m + p) = n * m + n * p.
Proof. intros n m p. induction m.
  Case "m = 0". simpl. rewrite mult_0_r. reflexivity.
  Case "m -> Sm". simpl. rewrite mult_n_Sm. rewrite mult_n_Sm.
                  rewrite IHm. rewrite plus_assoc'. reflexivity.
Qed.
